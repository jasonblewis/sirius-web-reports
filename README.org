* Sirius web reports app
* Copyright
 Copyright 2018 Jason Lewis

* License
This file is part of Sirius Web Reports.

    Sirius Web Reports is free software: you can redistribute it and/or modify
    it under the terms of the GNU Affero Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    Sirius Web Reports is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Affero Public License for more details.

    You should have received a copy of the GNU Affero Public License
    along with Sirius Web Reports.  If not, see <http://www.gnu.org/licenses/>.

* methods of running
** shotgun
   plackup -L Shotgun bin/app.psgi
** starman
   plackup -E development -s Starman bin/app.psgi
* medium scale app
  http://lists.preshweb.co.uk/pipermail/dancer-users/2015-October/005237.html
  https://github.com/wyoung/advent-calendar/tree/master/danceradvent/public/articles/2015
* installation for development
#+BEGIN_SRC bash
perlbrew install <latest perl>
perlbrew install-cpanm
# install libpam0g-dev for Authen::Simple
sudo apt install libpam0g-dev
cpanm --installdeps .
#+END_SRC
* to launch for production
pkill fcgi && DANCER_ENVIRONMENT=production plackup -D -E deployment -s FCGI --listen  /var/run/reports/reports.sock /home/reports/Reports/bin/app.psgi
* to launch for development
DANCER_ENVIRONMENT=development plackup -L Shotgun bin/app.psgi
browser-sync start --config bs-config.js
* authentication via config file
  generate hashed passwords with /usr/sbin/slappasswd
* to test the app
#+BEGIN_SRC 
DANCER_ENVIRONMENT=test prove -l t/002_index_route.t
#+END_SRC
* curl ajax
** to login with curl:
#+BEGIN_SRC bash
curl --cookie-jar ~/.curl-cookies --data 'username=test;password=test' localhost:5000/login

#+END_SRC
**  to do an ajax request with curl and cookies:
#+BEGIN_SRC bash
curl -b ~/.curl-cookies -d"message=hello" localhost:5000/time
#+END_SRC
** simple api request
#+BEGIN_SRC bash
curl -b ~/.curl-cookies 'localhost:5000/api/general-ledger/credit-cards' | json_pp | less
#+END_SRC
** to post 
curl -s -b ~/.curl-cookies -X POST --data '{"target_url":"/abc/def"}' http://localhost:5000/api/accounts-receivable/customers  | json_pp
* run the dbic.pl experiments program
#+BEGIN_SRC 
  DANCER_ENVIRONMENT=home perl experiment/dbic.pl
#+END_SRC
* test deployment from cli
DANCER_ENVIRONMENT=production plackup -E deployment -s Starman --workers=2 --listen /var/run/Reports/Reports.sock --pid /var/run/Reports/Reports.pid /home/reports/Reports/bin/app.psgi
sudo mkdir -p /var/run/Reports && sudo chown -R reports:www-data /var/run/Reports && sudo chmod -R g+w /var/run/Reports
curl -b ~/.curl-cookies https://reports.organictrader.com.au/api/accounts-receivable/customers
* deployment steps
#+BEGIN_SRC bash
# 
ssh reports@debian
# get the latest version
git pull
# make sure libpam0g-dev is installed, required for Authen::PAM
sudo apt install libpam0g-dev unixodbc-dev
# unset LANG in a subshell
(unset LANG ; cpanm DBD::ODBC)
# Authen::PAM doesn't install cleanly under a container, do it manually, no test
cpanm -n Authen::PAM
# DBIx::Class::Schema::Loader has problems - skip tests for it
cpanm -n DBIx::Class::Schema::Loader
# install any new dependencies
cpanm --installdeps .
# run tests
DANCER_ENVIRONMENT=test prove -l t/002_routes.t
# restart systemd service
sudo systemctl restart reports
#+END_SRC

* Best practice
 See the GL Account Reconcilliation report for the current best way to write reports
 * Make a report path /some/report
 * make an API path /API/some/report that returns the json data
 * use json_table2.tt to build it
* debugging sql queries
  to get DBIX_CLASS traces do:
  DBIC_TRACE="4=/tmp/trace.out" DANCER_ENVIRONMENT=development plackup -L Shotgun bin/app.psgi

  (trace to a file outside the directory if you are running under browser-sync)
