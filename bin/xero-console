#! /usr/bin/env perl

use strict;
use warnings;

use Path::Tiny;
use YAML::Tiny;
use Net::Xero;
use XML::Simple;
use JSON::MaybeXS;

use WebService::Xero::Agent::PrivateApplication;
use Data::Dumper;

use Dancer2;
use Dancer2::Plugin::Database;

=head1 Name

xero-console

=head1 Prerequisites

=over

=item Currency

AUD has to be enabled in the Xero account.

=back

=head1 WebService::Xero

The module doesn't support PUT requests, here is a patch: L<https://rt.cpan.org/Ticket/Display.html?id=126897>.

=cut

my $command = shift || '';
my $xero_config = config->{xero};
my $pkey = path($xero_config->{private_key_file})->slurp;

my $json = '';

if (@ARGV == 1) {
    $json = load_json($ARGV[0]);
}

# instantiate private application object
my $xero_app = WebService::Xero::Agent::PrivateApplication->new(
    CONSUMER_KEY    => $xero_config->{consumer_key},
    CONSUMER_SECRET => $xero_config->{consumer_secret},
    PRIVATE_KEY     => $pkey,
);

if ($command eq 'create_account') {
    unless ($json) {
        die "Need JSON data for $command.\n";
    }

    my $account = $xero_app->do_xero_api_call(
        'https://api.xero.com/api.xro/2.0/Accounts',
        'PUT',
        $json,
    );

    print Dumper($account);
    exit;
}

if ($command eq 'create_contact') {
    my $json =  to_json({Name => 'Organic Trader'});

    # create contact initially
    my $contact = $xero_app->do_xero_api_call(
        'https://api.xero.com/api.xro/2.0/Contacts',
        'POST',
        $json,
    );

    exit;
}

# use contact id from configuration
my $contact_id = $xero_config->{contact_id};

# run the query
my $invoices_sql = q%
select 
'Organic Trader Pty Ltd' as ContactName,
'orders@organictrader.com.au' as EmailAddress,
'Unit 13, 809-821 Botany Road' as 'POAddressLine1',
'' as 'POAddressLine2',
'' as 'POAddressLine3',
'' as  'POAddressLine4',
'Rosebery' as POCity,
'NSW' as PORegion,
'2018' as POPostalCode,
'Australia' as POCountry,
invoice_nr as 'InvoiceNumber',
convert(date,invoice_date) as InvoiceDate,
convert(date,dateadd(d,30,invoice_date)) as DueDate,
product_code as InventoryItemCode,
description as Description,
shipped_qty as Quantity,
round((round(unit_price,2)
  -discount_rate/100*round(unit_price,2)
  +tax_rate/100*(round(unit_price,2)
  -discount_rate/100*round(unit_price,2)))*shipped_qty,2)/shipped_qty as UnitAmount,

case when  (tax_rate = 10)  then '210.1' else '210.2' end as AccountCode,
case when  (tax_rate = 10)  then 'BASEXCLUDED' else 'BASEXCLUDED' end as TaxType,
'' as TrackingName1,
'' as TrackingOption1,
'' as TrackingName2,
'' as TrackingOption2,
'' as Currency



 from so_order_and_ship_view with (nolock)
where customer_code = 'FATAPP'
--and invoice_date >= '2017-02-09'
 and invoice_date >= '2018-03-31'
--and invoice_nr = '228679'
--and invoice_nr = '230162'
order by invoice_nr 
%;

my $sth = database->prepare($invoices_sql) or die "can't prepare\n";
$sth->execute or die $sth->errstr;
my $fields = $sth->{NAME};
my $rows = $sth->fetchall_arrayref({});
$sth->finish;

# Retrieve invoices from our organisation
my $invoice_struct = $xero_app->do_xero_api_call(
    'https://api.xero.com/api.xro/2.0/Invoices?ContactIDs=' . $xero_config->{contact_id},
    'GET',
);

my $xero_invoice_struct = $invoice_struct->{Invoices};

print "Number of invoices in Xero: ", scalar(@$xero_invoice_struct), "\n";

# Turn into a hash
my %xero_invoices;

for my $invoice_ref (@$xero_invoice_struct) {
    $xero_invoices{$invoice_ref->{InvoiceNumber}} = $invoice_ref;
}

# print Dumper $invoice_struct;

print Dumper $rows->[0];
print "Invoices from Xero: ", Dumper(\%xero_invoices), "\n";

my %sirius_invoices;
my $current_invoice_number = '';

exit if scalar(@$rows) == 0;

# loop over entries
for my $invoice_entry (@$rows) {
    # nuke excess whitespace
    nuke_whitespace($invoice_entry);

    # check if we have already an entry for this invoice number
    my $invoice_number = $invoice_entry->{InvoiceNumber};

    next if exists $xero_invoices{$invoice_number};

    if ($current_invoice_number ne $invoice_number) {
        if ($current_invoice_number) {
            print "Done with invoice $current_invoice_number.\n";
            submit_xero_invoice( $xero_app, $contact_id, $current_invoice_number, $sirius_invoices{$current_invoice_number} );
            exit;
        }
        $current_invoice_number = $invoice_number;
    }

    push @{$sirius_invoices{$invoice_number}}, $invoice_entry;
};

# submit last invoice
submit_xero_invoice( $xero_app, $contact_id, $current_invoice_number, $sirius_invoices{$current_invoice_number} );

sub submit_xero_invoice {
    my ($xero, $contact_id, $invoice_number, $data) = @_;

    print "Data for $invoice_number: ", Dumper($data);

    # get common information from first record
    my %invoice_data = (
        InvoiceNumber => $invoice_number,
        Date => $data->[0]->{InvoiceDate},
        DueDate => $data->[0]->{DueDate},
        CurrencyCode => 'AUD',
        TaxType => $data->[0]->{TaxType},
    );

    # build data structure for submission
    my $xero_invoice = {
        Type => 'ACCPAY',
        Contact => {
            ContactID => $contact_id,
        },
        %invoice_data,
    };

    # add line items
    my @xero_items;

    for my $organic_item (@$data) {
        my $xero_item = {
            Description => $organic_item->{Description},
            Quantity => $organic_item->{Quantity},
            AccountCode => $organic_item->{AccountCode},
            UnitAmount => $organic_item->{UnitAmount},
        };

        push @xero_items, $xero_item;
    };

    $xero_invoice->{LineItems} = \@xero_items;

#    print "Xero data: ", Dumper($xero_invoice);

    # submit invoice to xero
    my $json_data = to_json( $xero_invoice );

    my $ret_invoice = $xero_app->do_xero_api_call(
        'https://api.xero.com/api.xro/2.0/Invoices',
        'POST',
        $json_data,
    );

    print "RI: ", Dumper($ret_invoice), "\n";
}

sub nuke_whitespace {
    my $data = shift;

    while (my ($field, $value) = each %$data) {
        if ($value =~ s%\s+$%%) {
            $data->{$field} = $value;
        }
    }
}

=head2 load_json($json_file)

Loads JSON from file and verifies it.

=cut

sub load_json {
    my $json_file = shift;
    my $json;

    $json = path($json_file)->slurp_utf8;

    # verify
    eval {
        my $struct = decode_json($json);
    };

    if ($@) {
        die "Failed to parse JSON file $ARGV[0]: ", $@;
    }

    return $json;
}

